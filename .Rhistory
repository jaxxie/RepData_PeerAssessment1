pollutantmean
getwd()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?qpois
dpois(rpois(10,2))
dpois(rpois(10,2),2)
plot(dpois(rpois(10,2),2))
plot(qpois(rpois(10,2),2))
rpois(10,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
plot y
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time()
message("test")
print
printf
print("test")
a <- matrix
?matix
?matrix
matrix(c(1,2,3,4),nrow=1,ncol=2)
matrix(c(1,2,3,4),nrow=1,ncol=4)
matrix(c(1,2,3,4),nrow=2,ncol=4)
matrix(c(1,2,3,4),nrow=2,ncol=2)
matrix(c(1,2,3,4),nrow=2,ncol=2)
matrix(c(1,2,3,4),nrow=2,ncol=2,byrow = TRUE)
m = matrix(c(1,2,3,4),nrow=2,ncol=2)
m
solve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
m
makeCacheMatrix(m)
cacheSolve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
debugSource('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
makeCacheMatrix(m)
cacheSolve(m)
x$getinv
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
x$getinv
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
n <- cacheSolve(m)
n <- makeCacheMatrix(m)
n
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
source('~/Dropbox-work/Dropbox/coursera/R Programming/Programming Assignment 2/ProgrammingAssignment2/cachematrix.R')
n <- makeCacheMatrix(matrix(c(3,4,5,6,6,5),nrow=3,ncol=3))
cacheSolve(n)
n <- makeCacheMatrix(matrix(c(3,4,5,6),nrow=2,ncol=2))
cacheSolve(n)
cacheSolve(n)
cacheSolve(n)
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
download.file()?
;
?download
?download.file()
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
setwd("/Users/jax/.dropbox-two/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3")
source('~/Dropbox-work/Dropbox/coursera/03 Getting and Cleaning Data/quiz 3/quiz3.R')
getwd()
pwd
pwd()
getwd()
unzip("activity.zip")
unz
unz("activity.zip","")
unz("activity.zip","")
unz("activity.zip","tetst")
unzip("activity.zip","tetst")
unzip("activity.zip","~")
unzip("activity.zip","~")
zip.file.extract
?unzip
unzip("activity.zip",exdir="~")
unzip("activity.zip","test.csv")
unzip("activity.zip",list=true)
unzip("activity.zip",list=tTRUE)
unzip("activity.zip",list=TRUE)
getwd()
setwd('/Users/kindaixin/Dropbox-work/Dropbox/coursera/05 Reproducible Research/PA1/RepData_PeerAssessment1')
unzip("activity.zip")
read.csv("activity.csv")
data
data
activityData
activityData <- read.csv("activity.csv")
activityData
names(activityData)
class(activityData)
aggregate?
as
?aggregate
View(activityData)
View(activityData)
meanPerDay <- aggregate(date ~ steps, data = activityData, FUN = "mean")
warnings()
?mean
meanPerDay <- aggregate(date ~ steps, data = activityData, FUN = "mean",na.rm=true)
true
meanPerDay <- aggregate(date ~ steps, data = activityData, FUN = "mean",na.rm=TRUE)
TRUE
FA
meanPerDay <- aggregate(date ~ steps, data = activityData, mean,na.rm=TRUE)
meanPerDay <- aggregate(date ~ steps, data = activityData, FUN = "mean",na.rm=TRUE)
meanPerDay <- aggregate(date ~ steps, data = activityData, FUN = "mean", na.rm = TRUE)
warnings()
View(meanPerDay)
meanPerDay <- aggregate(steps ~ date, data = activityData, FUN = "mean", na.rm = TRUE)
View(meanPerDay)
meanPerDay <- aggregate(steps ~ date, data = activityData, FUN = "mean")
View(meanPerDay)
View(meanPerDay)
?head
meanPerDay <- aggregate(steps ~ date, data = activityData, FUN = "mean", na.rm = TRUE)
qplot(steps ~ data, data = activityData)
qplot(steps ~ data, data = activityData)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
qplot(steps ~ data, data = activityData)
qplot(steps~data, data = activityData)
qplot(date, step, data = activityData)
qplot(date, step, data = activityData)
nrow(activityData)
class(activityData)
qplot(date, step, activityData)
library(ggplot2)
qplot(date, step, activityData)
qplot(date, step, data = activityData)
qplot(date,  data = activityData)
qplot(date ~ step,  data = activityData)
qplot(date~step,  data = activityData)
sumPerDay <- aggregate(steps ~ date, data = activityData, FUN = "sum", na.rm = TRUE)
sumPerDay <- aggregate(steps ~ date, data = activityData, FUN = "sum", na.rm = TRUE)
sumPerDay
qplot(date~step,data=sumPerDay)
qplot(step,data=sumPerDay)
qplot(~step,data=sumPerDay)
qplot(,data=sumPerDay)
?qplot
qplot(x,y,data=sumPerDay)
qplot(date,steps,data=sumPerDay)
qplot(date,steps,data=sumPerDay) + geom_bar()
qplot(date,steps,data=sumPerDay)
?qplot
qplot(date,steps,data=sumPerDay,geom="histogram")
qplot(date,steps,data=sumPerDay,geom=histogram)
qplot(date,steps,data=sumPerDay,geom="histogram"")
""
qplot(date,steps,data=sumPerDay,geom="histogram")
qplot(date,steps,data=sumPerDay,geom="histogram",stat="identity")
qplot(date,steps,data=sumPerDay,geom="histogram",stat="identity")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(sumPerDay)
View(sumPerDay)
?plot
"adsa" + "asdadasd"
meanPerInterval <- aggregate(steps ~ interval, data = activityData, FUN = "mean", na.rm = TRUE)
View(meanPerInterval)
meanPerInterval <- aggregate(steps ~ interval, data = activityData, FUN = "mean", na.rm = TRUE)
?plot
meanPerInterval <- aggregate(steps ~ interval, data = activityData, FUN = "mean", na.rm = TRUE)
plot(meanPerInterval$interval,meanPerInterval$steps, type="l")
max(meanPerInterval$Step)
?max
max(c(1,2))
meanPerInterval$step
max(meanPerInterval$step)
maxMean <- max(meanPerInterval$step)
meanPerInterval[,]
meanPerInterval[,step>1]
meanPerInterval[,step>1]meanPerInterval$interval
meanPerInterval$interval
meanPerInterval$interval[1]
meanPerInterval$interval[2]
meanPerInterval$interval[2,]
meanPerInterval$interval[2]
meanPerInterval$interval[>1]
meanPerInterval$interval[interval>1]
meanPerInterval$interval[meanPerInterval$interval>1]
meanPerInterval$interval[meanPerInterval$interval>5]
meanPerInterval$interval[meanPerInterval$interval==max(meanPerInterval$step)]
class(meanPerInterval$interval[meanPerInterval$interval==max(meanPerInterval$step)])
meanPerInterval$interval==max(meanPerInterval$step)
max(meanPerInterval$step)
meanPerInterval$interval
meanPerInterval$interval>=max(meanPerInterval$step)
which.max
?which.max
which.max(meanPerInterval$step
which.max(meanPerInterval$step)
which.max(meanPerInterval$step)
meanPerInterval$step
which(is.na(activityData$steps))
activityData[which(is.na(activityData$steps))]
activityData[which(is.na(activityData$steps)),]
length(activityData[which(is.na(activityData$steps)),])
nrow(activityData[which(is.na(activityData$steps)),])
is.na(activityData)
sum(is.na(activityData))
?aggregate
aggregate(activityData,interval,FUN="mean")
aggregate(steps ~ interval,interval,FUN="mean")
aggregate(steps ~ interval,data= activityData,FUN="mean")
aggregate(steps ~ interval,data= activityData,FUN="mean")==c(1,1)
aggregate(steps ~ interval,data= activityData,FUN="mean")
class(aggregate(steps ~ interval,data= activityData,FUN="mean"))
identical(aggregate(steps ~ interval,data= activityData,FUN="mean"),aggregate(steps ~ interval,data= activityData,FUN="mean", na.rm=TRUE))
identical(aggregate(steps ~ interval,data= activityData,FUN="mean"),aggregate(steps ~ interval,data= activityData,FUN="mean", na.rm=FALSE))
identical(aggregate(steps ~ interval,data= activityData,FUN="mean"),aggregate(steps ~ interval,data= activityData,FUN="mean", na.rm=FALSE))
c(1,2,NA)
mean(c(1,2,NA))
mean(c(1,2,NA),na.rm=TRue)
mean(c(1,2,NA),na.rm=TRUE)
mean(c(1,2,NA),na.rm=FALSE)
identical(aggregate(steps ~ interval,data= activityData,FUN="mean"),aggregate(steps ~ interval,data= activityData,FUN="mean", na.rm=TRUE))
meanInterval <- aggregate(steps ~ interval,data= activityData,FUN="mean", na.rm=TRUE)
View(meanPerInterval)
is.na(activityData)
which.is.na(activityData)
which(is.na(activityData))
(is.na(activityData))
activityData[(is.na(activityData)),]
View(meanPerInterval)
?merge
merge(activityData,meanInterval,by=c("interval","interval"))
View(activityData)
merge(activityData,meanInterval,by=c("interval","interval"))
a <- meanInterval
a
a <- NA
a
meanInterval
a <- meanInterval
a
?rename
colnames(a)
colnames(a) <- c("inter","steps")
a
names(a)
merge(activityData,a,by=c("interval","interval"))
merge(activityData,a,by=c("interval","inter"))
merge(activityData,a,by.x="interval",by.y="inter")
merge(activityData,meanInterval,by="interval")
mergedData[is.na(mergedData$steps)]
mergedData <- merge(activityData,meanInterval,by="interval")
mergedData[is.na(mergedData$steps)]
is.na(mergedData$steps)
is.na(mergedData)
is.na(mergedData$steps)
mergedData$steps
mergedData
names(mergedData)
colname
colnames
colnames(mergedData)
mergedData <- merge(activityData,meanInterval,by="interval")
View(mergedData)
colnames
colnames(mergedData) <- c("interval","steps.original","date","steps.mean")
mergedData[mergedData$steps.original,]
mergedData[is.na(mergedData$steps.original),]
mergedData[is.na(mergedData$steps.mean),]
mergedData[is.na(mergedData$steps.original),]
nrow(mergedData[is.na(mergedData$steps.original),])
mergedData[is.na(mergedData$steps.original),]
mergedData[is.na(mergedData$steps.original),] <- mergedData[is.na(mergedData$steps.mean),]
mergedData[is.na(mergedData$steps.original),]
mergedData$test <- c(1,2)
View(mergedData)
View(mergedData)
mergedData <- mergedData[,!names(mergedData) %in% c("test")]
View(mergedData)
mergedData[is.na(mergedData$steps.original),]
mergedData[is.na(mergedData$steps.original),]$steps.original
na.row <- is.na(mergedData$steps.original)
na.row
na.row <- is.na(mergedData$steps.original)
mergedData$steps.impute <- mergedData$steps.originak
mergedData[na.row,]$steps.impute <- mergedData[na.row,]$steps.original
mergedData$steps.impute <- mergedData$steps.original
mergedData[na.row,]$steps.impute <- mergedData[na.row,]$steps.original
View(mergedData)
mergedData[na.row,]$steps.impute <- mergedData[na.row,]$steps.mean
View(mergedData)
mergedData$steps.impute <- mergedData$steps.original
View(mergedData)
View(mergedData$step.original)
View(mergedData$steps.original)
View(mergedData$steps.original[0])
View(mergedData$steps.original[1])
View(mergedData$steps.original[mergedData$steps.original>0])
mergedData$steps.impute <- mergedData$steps.original
View(mergedData)
mergedData[na.row,]$steps.impute <- mergedData[na.row,]$steps.original
View(mergedData)
View(mergedData)
mergedData[na.row,]$steps.impute <- mergedData[na.row,]$steps.mean
View(mergedData)
activityDataImpute <- activityData[,c("steps.impute","date","interval")]
activityDataImpute <- mergedData[,c("steps.impute","date","interval")]
View(activityDataImpute)
?qplot
